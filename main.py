import logging
import os
os.system("pip install aiogram")
from random import randint
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types.message import ContentTypes
from aiogram.types.message import ContentType
import markups as nav
waiting = 0
TOKEN = "5577758465:AAE3GrJxGq0MDg6HOHSbyIVULywe7yQXtTA"
ADMIN_ID = "1764135502"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)



@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await bot.send_message(ADMIN_ID, "{0.username} –Ω–∞–ø–∏—Å–∞–ª(–∞) /start".format(message.from_user), parse_mode="HTML")
    global waiting
    waiting = 0
    if message.chat.type == 'private':
        print("ID " + str(message.from_user.id) + " –Ω–∞–ø–∏—Å–∞–ª(–∞) /start")
        await bot.send_message(message.from_user.id, "‚úÖ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, *{0.first_name}*!\n–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ—Ñ—Ñ–∏—Ü–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ –º–∞–≥–∞–∑–∏–Ω–∞ ¬´*Lemada*¬ª.\n–ö–∞–∫–æ–π —É –í–∞—Å –≤–æ–ø—Ä–æ—Å‚ùì".format(message.from_user), parse_mode= 'Markdown', reply_markup=nav.mainMenu)


@dp.message_handler()
async def bot_message(message: types.Message):
    if message.chat.type == 'private':
        global waiting
        if waiting == 0:
            if message.text == "/support":
                print("ID " + str(message.from_user.id) + " –æ–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É")
                await bot.send_message(ADMIN_ID, "{0.username} –æ–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É".format(message.from_user).format(message.from_user), parse_mode="HTML")
                await bot.send_message(message.from_user.id, "‚úçÔ∏è *{0.first_name}* , –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É".format(message.from_user), parse_mode= 'Markdown', reply_markup=nav.supportMenu)
                waiting = 1
            else:
                print("ID " + str(message.from_user.id) + " –Ω–∞–ø–∏—Å–∞–ª(–∞) " + message.text)
                await bot.send_message(ADMIN_ID, "{0.username} –Ω–∞–ø–∏—Å–∞–ª(–∞) " + message.text.format(message.from_user), parse_mode="HTML")
                await bot.send_message(message.from_user.id, "ü§î –Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ ¬´*" + message.text +"*¬ª.\n–ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ—ë —Å–Ω–æ–≤–∞.".format(message.from_user), parse_mode= 'Markdown')
                await bot.send_message(message.from_user.id, "‚úÖ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, *{0.first_name}*!\n–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ—Ñ—Ñ–∏—Ü–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ –º–∞–≥–∞–∑–∏–Ω–∞ ¬´*Lemada*¬ª.\n–ö–∞–∫–æ–π —É –í–∞—Å –≤–æ–ø—Ä–æ—Å‚ùì".format(message.from_user), parse_mode= 'Markdown', reply_markup=nav.mainMenu)
        else:
            waiting = 0
            print("ID " + str(message.from_user.id) + " –æ–ø–∏—Å–∞–ª(–∞) –ø—Ä–æ–±–ª–µ–º—É")
            await bot.send_message(ADMIN_ID, "{0.username} –æ–ø–∏—Å–∞–ª(–∞) –ø—Ä–æ–±–ª–µ–º—É " .format(message.from_user), parse_mode="HTML")
            await bot.send_message(message.from_user.id, "*{0.first_name}*, –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ.\n–°–∫–æ—Ä–æ –≤–∞–º –æ—Ç–≤–µ—Ç—è—Ç, –æ–∂–∏–¥–∞–π—Ç–µ!".format(message.from_user), parse_mode= 'Markdown')
            await bot.send_message(ADMIN_ID,  "‚úçÔ∏è: " + str(message.html_text) + "\nüÜî: " + str(message.from_user.id), parse_mode="HTML")


            

@dp.callback_query_handler(text="btnRandom")
async def randomize(message: types.Message):
    print("ID " + str(message.from_user.id) + " –æ–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É")
    await bot.send_message(ADMIN_ID, "{0.username} –æ–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É ".format(message.from_user), parse_mode="HTML")
    await bot.delete_message(message.from_user.id, message.message.message_id)
    await bot.send_message(message.from_user.id, "‚úçÔ∏è *{0.first_name}* , –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É".format(message.from_user), parse_mode= 'Markdown', reply_markup=nav.supportMenu)
    global waiting
    waiting = 1



@dp.callback_query_handler(text="btnBack")
async def back(message: types.Message):
    global waiting
    waiting = 0
    print("ID " + str(message.from_user.id) + " –≤–µ—Ä–Ω—É–ª—Å—è(–∞—Å—å) –≤ /start")
    await bot.send_message(ADMIN_ID, "{0.username} –≤–µ—Ä–Ω—É–ª—Å—è(–∞—Å—å) –≤ /start".format(message.from_user), parse_mode="HTML")
    await bot.delete_message(message.from_user.id, message.message.message_id)
    await bot.send_message(message.from_user.id, "‚úÖ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, *{0.first_name}*!\n–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ—Ñ—Ñ–∏—Ü–∞–ª—å–Ω–æ–º —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ ¬´*LadyWow*¬ª.\n–ö–∞–∫–æ–π —É –í–∞—Å –≤–æ–ø—Ä–æ—Å‚ùì".format(message.from_user), parse_mode= 'Markdown', reply_markup=nav.mainMenu)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates = True)

